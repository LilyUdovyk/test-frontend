{"version":3,"sources":["store/users/actions.ts","store/user/actions.ts","history.ts","store/user/reducers.ts","store/users/reducers.ts","store/rootReducer.ts","services/API.ts","store/user/utils.ts","store/user/sagas.ts","store/users/utils.ts","store/users/sagas.ts","store/rootSaga.ts","Routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["retrieveUsers","createAsyncAction","createUser","retrieveUser","updateUser","deleteUser","history","createBrowserHistory","initialState","error","userData","id","name","email","picture","role","usersData","rootReducer","combineReducers","router","connectRouter","user","state","action","type","getType","actions","success","payload","failure","users","axios","create","baseURL","process","responseType","a","API","post","response","Error","get","data","put","delete","createUserSaga","retrieveUserSaga","updateUserSaga","deleteUserSaga","take","request","call","putResolve","push","message","console","log","select","userId","updatedUserData","updatedUser","deletedUser","retrieveUsersSaga","rootSaga","all","spawn","UsersList","React","lazy","UserPage","CreateUser","UserSettings","connect","memo","Suspense","fallback","exact","path","component","from","to","render","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","routerMiddleware","run","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"+GAAA,6CAIaA,EAAgBC,4BACzB,+BACA,+BACA,+BAHyBA,I,wFCJ7B,mJAGaC,EAAaD,4BACtB,2BACA,2BACA,2BAHsBA,GAMbE,EAAeF,4BACxB,6BACA,6BACA,6BAHwBA,GAMfG,EAAaH,4BACtB,2BACA,2BACA,2BAHsBA,GAMbI,EAAaJ,4BACtB,2BACA,2BACA,2BAHsBA,I,oICnBbK,EAAUC,c,sBCGjBC,EAA0B,CAC5BC,MAAO,KACPC,SAAU,CACNC,GAAI,GACJC,KAAM,GACNC,MAAO,GACPC,QAAS,GACVC,KAAM,K,QCPPP,EAA2B,CAC7BC,MAAO,KACPO,UAAW,ICaAC,EAVKC,YAAgB,CAChCC,OAAQC,YAAcd,GACtBe,KFIW,WAAqE,IAApEC,EAAmE,uDAAhDd,EAAce,EAAkC,uCAC/E,OAAQA,EAAOC,MACX,KAAKC,kBAAQC,IAAmBC,SAC5B,OAAO,eACAL,EADP,CAEIb,MAAO,KACPC,SAAUa,EAAOK,UAEzB,KAAKH,kBAAQC,IAAmBG,SAC5B,OAAO,eACAP,EADP,CAEIb,MAAOc,EAAOK,UAEtB,KAAKH,kBAAQC,IAAqBC,SAC9B,OAAO,eACAL,EADP,CAEIb,MAAO,KACPC,SAAUa,EAAOK,UAEzB,KAAKH,kBAAQC,IAAqBG,SAC9B,OAAO,eACAP,EADP,CAEIb,MAAOc,EAAOK,UAEtB,KAAKH,kBAAQC,IAAmBC,SAC5B,OAAO,eACAL,EADP,CAEIb,MAAO,KACPC,SAAUa,EAAOK,UAEzB,KAAKH,kBAAQC,IAAmBG,SAC5B,OAAO,eACAP,EADP,CAEIb,MAAOc,EAAOK,UAEtB,KAAKH,kBAAQC,IAAmBC,SAC5B,OAAO,eACAL,EADP,CAEIb,MAAO,KACPC,SAAU,CACNC,GAAI,GACJC,KAAM,GACNC,MAAO,GACPC,QAAS,GACVC,KAAM,MAGjB,KAAKU,kBAAQC,IAAmBG,SAC5B,OAAO,eACAP,EADP,CAEIb,MAAOc,EAAOK,UAEtB,QACI,OAAON,IExDfQ,MDHW,WAAwE,IAAvER,EAAsE,uDAAlDd,EAAce,EAAoC,uCAClF,OAAQA,EAAOC,MACX,KAAKC,kBAAQC,IAAsBC,SAC/B,OAAO,eACAL,EADP,CAEIb,MAAO,KACPO,UAAWO,EAAOK,UAE1B,KAAKH,kBAAQC,IAAsBG,SAC/B,OAAO,eACAP,EADP,CAEIb,MAAOc,EAAOK,UAEtB,QACI,OAAON,M,+CEtBJS,E,OAAAA,EAAMC,OAAO,CAC1BC,QAASC,uBACTC,aAAc,SCFHjC,EAAU,uCAAG,WAAOU,EAAcC,EAAeC,EAAiBC,GAArD,eAAAqB,EAAA,+EAECC,EAAIC,KAAK,SAAU,CAAE1B,OAAMC,QAAOC,UAASC,SAF5C,cAEhBwB,EAFgB,yBAGfA,GAHe,yDAKf,IAAIC,MAAJ,OALe,yDAAH,4DASVrC,EAAY,uCAAG,WAAOQ,GAAP,eAAAyB,EAAA,+EAEDC,EAAII,IAAJ,iBAAkB9B,IAFjB,cAElBD,EAFkB,yBAGjBA,EAASgC,MAHQ,yDAKjB,IAAIF,MAAJ,OALiB,yDAAH,sDASZpC,EAAU,uCAAG,WAAOO,EAAYC,EAAcC,EAAeC,EAAiBC,GAAjE,eAAAqB,EAAA,+EAECC,EAAIM,IAAJ,iBAAkBhC,GAAM,CAAEC,OAAMC,QAAOC,UAASC,SAFjD,cAEhBwB,EAFgB,yBAGfA,GAHe,yDAKf,IAAIC,MAAJ,OALe,yDAAH,8DASVnC,EAAU,uCAAG,WAAOM,GAAP,eAAAyB,EAAA,+EAECC,EAAIO,OAAJ,iBAAqBjC,IAFtB,cAEhB4B,EAFgB,yBAGfA,GAHe,yDAKf,IAAIC,MAAJ,OALe,yDAAH,sD,WCvBNK,G,WAaAC,G,WAiBAC,G,WAcAC,GA5CV,SAAUH,IAAV,2EAEiB,OAFjB,SAEuBI,YAAKvB,IAAmBwB,SAF/C,OAIY,OAJZ,SAEKtB,EAFL,EAEKA,QAFL,kBAIkBuB,YAAKjD,EAAY0B,EAAQhB,KAAMgB,EAAQf,MAAOe,EAAQd,QAASc,EAAQb,MAJzF,OAKD,OADMM,EAJL,iBAKK+B,YAAW1B,IAAmBC,QAAQN,IAL3C,QAMD,OANC,UAMKsB,YAAIU,YAAK,WANd,gCAQD,OARC,oCAQKV,YAAIjB,IAAmBG,QAAQ,KAAMyB,UAR1C,6EAaA,SAAUR,IAAV,6EAEiB,OAFjB,SAEuBG,YAAKvB,IAAqBwB,SAFjD,OAKc,OALd,SAEKtB,EAFL,EAEKA,QACR2B,QAAQC,IAAI5B,GAHT,kBAKoB6B,aAAO,SAAAnC,GAAK,OAAIA,EAAMD,KAAKV,MAL/C,OAOY,OAFP+C,EALL,OAMDH,QAAQC,IAAI,SAAUE,GANrB,UAOkBP,YAAKhD,EAAcyB,GAPrC,QASD,OAFMP,EAPL,OAQDkC,QAAQC,IAAI,OAAQnC,GARnB,UASK+B,YAAW1B,IAAqBC,QAAQN,IAT7C,QAUD,OAVC,UAUKsB,YAAIU,YAAK,SAAD,OAAUzB,KAVvB,gCAYD,OAZC,oCAYKe,YAAIjB,IAAqBG,QAAQ,KAAMyB,UAZ5C,6EAiBA,SAAUP,IAAV,6EAEiB,OAFjB,SAEuBE,YAAKvB,IAAmBwB,SAF/C,OAIyB,OAJzB,SAEKtB,EAFL,EAEKA,QAFL,kBAI+BuB,YAAK/C,EAAYwB,EAAQjB,GAAIiB,EAAQhB,KAAMgB,EAAQf,MAAOe,EAAQd,QAASc,EAAQb,MAJlH,OAMC,OAFM4C,EAJP,OAKOC,EAAcD,EAAgBjB,KALrC,UAMOU,YAAW1B,IAAmBC,QAAQiC,IAN7C,QAOC,OAPD,UAOOjB,YAAIU,YAAK,SAAD,OAAUO,EAAYjD,MAPrC,gCASC,OATD,oCASOgC,YAAIjB,IAAmBG,QAAQ,KAAMyB,UAT5C,6EAcA,SAAUN,IAAV,2EAEiB,OAFjB,SAEuBC,YAAKvB,IAAmBwB,SAF/C,OAIqB,OAJrB,SAEKtB,EAFL,EAEKA,QAFL,kBAI2BuB,YAAK9C,EAAYuB,GAJ5C,OAKC,OADMiC,EAJP,iBAKOT,YAAW1B,IAAmBC,QAAQkC,IAL7C,QAMC,OAND,UAMOlB,YAAIU,YAAK,WANhB,gCAQC,OARD,oCAQOV,YAAIjB,IAAmBG,QAAQ,KAAMyB,UAR5C,6EChDA,IAAMtD,EAAa,uCAAG,4BAAAoC,EAAA,+EAEDC,EAAII,IAAI,UAFP,cAEnBzB,EAFmB,yBAGlBA,EAAU0B,MAHQ,yDAKlB,IAAIF,MAAJ,OALkB,yDAAH,qD,WCITsB,GAAV,SAAUA,IAAV,uEAEH,OAFG,SAEGb,YAAKvB,IAAsBwB,SAF9B,OAIa,OAJb,kBAImBC,YAAKnD,GAJxB,OAKD,OADM8B,EAJL,gBAKKsB,YAAW1B,IAAsBC,QAAQG,IAL9C,+BAOD,OAPC,oCAOKa,YAAIjB,IAAsBG,QAAQ,KAAMyB,UAP7C,6E,eCFkBS,GAAV,SAAUA,IAAV,iEACb,OADa,SACPC,YAAI,CACRC,YAAMH,GACNG,YAAMpB,GACNoB,YAAMnB,GACNmB,YAAMlB,GACNkB,YAAMjB,KANK,uC,YCETkB,EAAYC,IAAMC,MAAK,kBAAM,gCAC7BC,EAAWF,IAAMC,MAAK,kBAAM,gCAC5BE,EAAaH,IAAMC,MAAK,kBAAM,gCAC9BG,EAAeJ,IAAMC,MAAK,kBAAM,gCAcvBI,cAAQ,KAARA,CAAcL,IAAMM,MAZV,kBACrB,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,4CACtB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWZ,IACtC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,YAAYC,UAAWT,IACzC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,eAAeC,UAAWR,IAC5C,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,mBAAmBC,UAAWP,IAChD,kBAAC,IAAD,CAAUQ,KAAK,IAAIC,GAAG,WACtB,kBAAC,IAAD,CAAOH,KAAK,IAAII,OAAQ,kBAAM,wDCRpCC,EAAiBC,cAEVC,EAAQC,YAAYpE,EAAaqE,YAC5CC,YAAiBjF,GACjB4E,IAGFA,EAAeM,IAAIzB,GAYJ0B,MAVf,WACE,OACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,IAAD,CAAiB9E,QAASA,GACxB,kBAAC,EAAD,SCZYoF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASd,OACP,kBAAC,IAAMe,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhG,GACL8C,QAAQ9C,MAAMA,EAAM6C,c","file":"static/js/main.757b4259.chunk.js","sourcesContent":["import { createAsyncAction } from \"typesafe-actions\";\r\nimport { UserData } from \"../user/types\";\r\n\r\n\r\nexport const retrieveUsers = createAsyncAction(\r\n    \"users/RETRIEVE_USERS_REQUEST\",\r\n    \"users/RETRIEVE_USERS_SUCCESS\",\r\n    \"users/RETRIEVE_USERS_FAILURE\"\r\n)<void, UserData[], string>();\r\n","import { createAsyncAction } from \"typesafe-actions\";\r\nimport { UserData, CreateUserCreds } from \"../user/types\";\r\n\r\nexport const createUser = createAsyncAction(\r\n    \"user/CREATE_USER_REQUEST\",\r\n    \"user/CREATE_USER_SUCCESS\",\r\n    \"user/CREATE_USER_FAILURE\"\r\n)<CreateUserCreds, UserData, string>();\r\n\r\nexport const retrieveUser = createAsyncAction(\r\n    \"user/RETRIEVE_USER_REQUEST\",\r\n    \"user/RETRIEVE_USER_SUCCESS\",\r\n    \"user/RETRIEVE_USER_FAILURE\"\r\n)<string, UserData, string>();\r\n\r\nexport const updateUser = createAsyncAction(\r\n    \"user/UPDATE_USER_REQUEST\",\r\n    \"user/UPDATE_USER_SUCCESS\",\r\n    \"user/UPDATE_USER_FAILURE\"\r\n)<UserData, UserData, string>();\r\n\r\nexport const deleteUser = createAsyncAction(\r\n    \"user/DELETE_USER_REQUEST\",\r\n    \"user/DELETE_USER_SUCCESS\",\r\n    \"user/DELETE_USER_FAILURE\"\r\n)<string, UserData, string>();","import { createBrowserHistory } from \"history\";\r\n\r\nexport const history = createBrowserHistory()","import { getType } from \"typesafe-actions\";\r\n\r\nimport { UserState, UserAction } from \"./types\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst initialState: UserState = {\r\n    error: null,\r\n    userData: {\r\n        id: '',\r\n        name: '',\r\n        email: '',\r\n        picture: '',\r\n       role: ''\r\n    }\r\n}\r\n\r\nexport default (state: UserState = initialState, action: UserAction): UserState => {\r\n    switch (action.type) {\r\n        case getType(actions.createUser.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                userData: action.payload\r\n            }\r\n        case getType(actions.createUser.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }\r\n        case getType(actions.retrieveUser.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                userData: action.payload\r\n            }\r\n        case getType(actions.retrieveUser.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }  \r\n        case getType(actions.updateUser.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                userData: action.payload\r\n            }\r\n        case getType(actions.updateUser.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }  \r\n        case getType(actions.deleteUser.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                userData: {\r\n                    id: '',\r\n                    name: '',\r\n                    email: '',\r\n                    picture: '',\r\n                   role: ''\r\n                }\r\n            }\r\n        case getType(actions.deleteUser.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            } \r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { getType } from \"typesafe-actions\";\r\n\r\nimport { UsersState, UsersAction } from \"./types\";\r\nimport * as actions from \"./actions\";\r\n\r\nconst initialState: UsersState = {\r\n    error: null,\r\n    usersData: []\r\n}\r\n\r\nexport default (state: UsersState = initialState, action: UsersAction): UsersState => {\r\n    switch (action.type) {\r\n        case getType(actions.retrieveUsers.success):\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                usersData: action.payload\r\n            }\r\n        case getType(actions.retrieveUsers.failure):\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            }  \r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { EmptyAction, StateType } from \"typesafe-actions\";\r\nimport { connectRouter } from \"connected-react-router\";\r\nimport { history } from \"../history\";\r\n\r\nimport { UserAction } from \"./user/types\";\r\nimport userReducer from './user/reducers'\r\nimport { UsersAction } from \"./users/types\";\r\nimport usersReducer from './users/reducers'\r\n\r\nconst rootReducer = combineReducers({\r\n    router: connectRouter(history),\r\n    user: userReducer,\r\n    users: usersReducer\r\n})\r\n\r\nexport type IRootState = StateType<typeof rootReducer>\r\nexport type IRootAction = UserAction \r\n                        | UsersAction \r\n                        | EmptyAction<string>\r\nexport default rootReducer","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  responseType: \"json\"\n});","import API from '../../services/API'\n\nexport const createUser = async (name: string, email: string, picture: string, role: string) => {\n  try {\n    const response = await API.post('/users', { name, email, picture, role });\n    return response\n  } catch (error) {\n    return new Error(error)\n  }\n}\n\nexport const retrieveUser = async (id: string) => {\n  try {\n    const userData = await API.get(`/users/${id}`);\n    return userData.data\n  } catch (error) {\n    return new Error(error)\n  }\n}\n\nexport const updateUser = async (id: string, name: string, email: string, picture: string, role: string) => {\n  try {\n    const response = await API.put(`/users/${id}`, { name, email, picture, role });\n    return response\n  } catch (error) {\n    return new Error(error)\n  }\n}\n\nexport const deleteUser = async (id: string) => {\n  try {\n    const response = await API.delete(`/users/${id}`);\n    return response\n  } catch (error) {\n    return new Error(error)\n  }\n}","import { take, call, put, putResolve, select } from 'redux-saga/effects';\r\nimport { push } from 'connected-react-router';\r\n\r\nimport * as actions from './actions'\r\nimport { createUser, retrieveUser, updateUser, deleteUser } from './utils'\r\n\r\nexport function* createUserSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.createUser.request)\r\n    try {\r\n      const user = yield call(createUser, payload.name, payload.email, payload.picture, payload.role)\r\n      yield putResolve(actions.createUser.success(user))\r\n      yield put(push('/users'))\r\n    } catch (error) {\r\n      yield put(actions.createUser.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nexport function* retrieveUserSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.retrieveUser.request)\r\n    console.log(payload)\r\n    try {\r\n      const userId = yield select(state => state.user.id)\r\n      console.log('userId', userId)\r\n      const user = yield call(retrieveUser, payload)\r\n      console.log('user', user)\r\n      yield putResolve(actions.retrieveUser.success(user))\r\n      yield put(push(`/user-${payload}`))\r\n    } catch (error) {\r\n      yield put(actions.retrieveUser.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nexport function* updateUserSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.updateUser.request)\r\n    try {\r\n        const updatedUserData = yield call(updateUser, payload.id, payload.name, payload.email, payload.picture, payload.role)\r\n        const updatedUser = updatedUserData.data\r\n        yield putResolve(actions.updateUser.success(updatedUser))\r\n        yield put(push(`/user-${updatedUser.id}`))\r\n    } catch (error) {\r\n        yield put(actions.updateUser.failure(error.message))\r\n    }\r\n  }\r\n}\r\n\r\nexport function* deleteUserSaga() {\r\n  while (true) {\r\n    const { payload } = yield take(actions.deleteUser.request)\r\n    try {\r\n        const deletedUser = yield call(deleteUser, payload)\r\n        yield putResolve(actions.deleteUser.success(deletedUser))\r\n        yield put(push('/users'))\r\n    } catch (error) {\r\n        yield put(actions.deleteUser.failure(error.message))\r\n    }\r\n  }\r\n}","import API from '../../services/API'\n\nexport const retrieveUsers = async () => {\n  try {\n    const usersData = await API.get(\"/users\");\n    return usersData.data\n  } catch (error) {\n    return new Error(error)\n  }\n}\n","import { take, call, put, putResolve, select } from 'redux-saga/effects';\r\nimport { push } from 'connected-react-router';\r\n\r\nimport * as actions from './actions'\r\nimport { retrieveUsers } from './utils'\r\n\r\nexport function* retrieveUsersSaga() {\r\n  while (true) {\r\n    yield take(actions.retrieveUsers.request)\r\n    try {\r\n      const users = yield call(retrieveUsers)\r\n      yield putResolve(actions.retrieveUsers.success(users))\r\n    } catch (error) {\r\n      yield put(actions.retrieveUsers.failure(error.message))\r\n    }\r\n  }\r\n}","import { all, spawn } from \"redux-saga/effects\";\r\nimport { retrieveUserSaga, createUserSaga, updateUserSaga, deleteUserSaga } from \"./user/sagas\";\r\nimport { retrieveUsersSaga } from \"./users/sagas\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    spawn(retrieveUsersSaga),\r\n    spawn(createUserSaga),\r\n    spawn(retrieveUserSaga),\r\n    spawn(updateUserSaga),\r\n    spawn(deleteUserSaga)\r\n  ]);\r\n}\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n// import { IRootState } from './store/rootReducer';\r\n\r\nconst UsersList = React.lazy(() => import(\"./components/UsersList\"));\r\nconst UserPage = React.lazy(() => import(\"./components/UserPage\"));\r\nconst CreateUser = React.lazy(() => import(\"./components/CreateUser\"));\r\nconst UserSettings = React.lazy(() => import(\"./components/UserSettings\"));\r\n\r\nconst Routes: React.FC = () => (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n        <Switch>\r\n            <Route exact path='/users' component={UsersList} />  \r\n            <Route exact path='/user-:id' component={UserPage} />  \r\n            <Route exact path='/create-user' component={CreateUser} />\r\n            <Route exact path='/update-user-:id' component={UserSettings} />            \r\n            <Redirect from=\"/\" to='/users' />\r\n            <Route path=\"/\" render={() => <div>Page Not Found</div>} />\r\n        </Switch>\r\n    </React.Suspense>\r\n)\r\nexport default connect(null)(React.memo(Routes))","import React from 'react';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { ConnectedRouter, routerMiddleware } from 'connected-react-router'\n\nimport rootReducer from './store/rootReducer';\nimport rootSaga from './store/rootSaga';\nimport { history } from './history';\nimport Routes from './Routes';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport const store = createStore(rootReducer, applyMiddleware(\n  routerMiddleware(history),\n  sagaMiddleware,\n))\n\nsagaMiddleware.run(rootSaga)\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Routes />\n      </ConnectedRouter>\n    </Provider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}